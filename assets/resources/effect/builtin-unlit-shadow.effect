// Copyright (c) 2017-2020 Xiamen Yaji Software Co., Ltd.
CCEffect %{
  techniques:
  - name: opaque
    passes:
    - switch: USE_OUTLINE_PASS
      vert: ouline-g-vs:vert
      frag: ouline-g-fs:frag
      rasterizerState:
        cullMode: front
      depthStencilState:
        depthFunc: less_equal
        depthTest: true
        depthWrite: true
      properties:
        lineWidth:     { value: 2, target: outlineParams.x }
        depthBias:     { value: 0,  target: outlineParams.y }
        baseColor:     { value: [0.6, 0.6, 0.6, 1],editor: { type: color } }
        baseColorMap:  { value: grey }
    - vert: unlit-vs:vert
      frag: unlit-fs:frag
      properties: &props
        mainTexture:    { value: grey,target: albedoMap }
        tilingOffset:   { value: [1, 1, 0, 0] }
        mainColor:      { value: [1, 1, 1, 1], linear: true, editor: { type: color } }
        colorScale:     { value: [1, 1, 1], target: colorScaleAndCutoff.xyz }
        alphaThreshold: { value: 0.5, target: colorScaleAndCutoff.w, editor: { parent: USE_ALPHA_TEST } }
        color:          { target: mainColor, linear: true, editor: { visible: false } } # backward compability
        useLight:  { value: 1.0 }
      migrations: &migs
        properties:
          mainColor:    { formerlySerializedAs: color }
    - switch: USE_GLOW_PASS
      vert: glow-g-vs:vert
      frag: glow-g-fs:frag
      rasterizerState:
        cullMode: none
      depthStencilState: &d1
        depthTest: true
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha  
      properties:
        glowScale:     { value: 10, target: glowScalParams.x }
        depthBias:     { value: 0,  target: glowScalParams.y }
        baseColor:     { editor: { type: color } }
    - &shadow-caster
      vert: shadow-caster-vs:vert
      frag: shadow-caster-fs:frag
      phase: shadow-caster
      propertyIndex: 0
      rasterizerState:
        cullMode: front
      properties:
        tilingOffset:   { value: [1.0, 1.0, 0.0, 0.0] }
        mainColor:      { value: [1.0, 1.0, 1.0, 1.0], target: albedo, editor: { displayName: Albedo, type: color } }
        albedoScale:    { value: [1.0, 1.0, 1.0], target: albedoScaleAndCutoff.xyz }
        alphaThreshold: { value: 0.5, target: albedoScaleAndCutoff.w, editor: { parent: USE_ALPHA_TEST } }
        mainTexture:    { value: grey, target: albedoMap, editor: { displayName: AlbedoMap } }

  - name: transparent
    passes:
    - vert: unlit-vs:vert
      frag: unlit-fs:frag
      depthStencilState: &d1
        depthTest: true
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      properties: *props
      migrations: *migs
    - *shadow-caster 
  - name: add
    passes:
    - vert: unlit-vs:vert
      frag: unlit-fs:frag
      rasterizerState: &r1 { cullMode: none }
      depthStencilState: *d1
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one
          blendSrcAlpha: src_alpha
          blendDstAlpha: one
      properties: *props
      migrations: *migs
  - name: alpha-blend
    passes:
    - vert: unlit-vs:vert
      frag: unlit-fs:frag
      rasterizerState: *r1
      depthStencilState: *d1
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendSrcAlpha: src_alpha
          blendDstAlpha: one_minus_src_alpha
      properties: *props
      migrations: *migs
}%

CCProgram shared-ubos %{
  uniform Constants {
    vec4 tilingOffset;
    vec4 albedo;
    vec4 albedoScaleAndCutoff;
    vec4 pbrParams;
    vec4 emissive;
    vec4 emissiveScaleParam;
  };
}%

CCProgram unlit-vs %{
  precision highp float;
  #include <legacy/input>
  #include <builtin/uniforms/cc-global>
  #include <legacy/decode-base>
  #include <legacy/local-batch>
  #include <legacy/input>
  #include <legacy/fog-vs>

  #if USE_VERTEX_COLOR
    in lowp vec4 a_color;
    out lowp vec4 v_color;
  #endif

  #if USE_TEXTURE
    out vec2 v_uv;
    uniform TexCoords {
      vec4 tilingOffset;
    };
  #endif

  vec4 vert () {
    vec4 position;
    CCVertInput(position);

    mat4 matWorld;
    CCGetWorldMatrix(matWorld);

    #if USE_TEXTURE
      v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;
      #if SAMPLE_FROM_RT
        CC_HANDLE_RT_SAMPLE_FLIP(v_uv);
      #endif
    #endif

    #if USE_VERTEX_COLOR
      v_color = a_color;
    #endif

    CC_TRANSFER_FOG(matWorld * position);
    return cc_matProj * (cc_matView * matWorld) * position;
  }
}%

CCProgram unlit-fs %{
  precision highp float;
  #include <legacy/output-standard>
  #include <legacy/fog-fs>

  #if USE_ALPHA_TEST
    #pragma define-meta ALPHA_TEST_CHANNEL options([a, r, g, b])
  #endif

  #if USE_TEXTURE
    in vec2 v_uv;
    uniform sampler2D albedoMap;
  #endif

  uniform Constant {
    vec4 mainColor;
    vec4 colorScaleAndCutoff;
     float useLight;
  };

  #if USE_VERTEX_COLOR
    in lowp vec4 v_color;
  #endif

  vec4 frag () {
    vec4 o = mainColor;
    o.rgb *= colorScaleAndCutoff.xyz;

    #if USE_VERTEX_COLOR
      o.rgb *= SRGBToLinear(v_color.rgb);//use linear
      o.a *= v_color.a;
    #endif

    #if USE_TEXTURE
      vec4 texColor = texture(albedoMap, v_uv);
      texColor.rgb = SRGBToLinear(texColor.rgb);
      o *= texColor;
    #endif

    #if USE_ALPHA_TEST
      if (o.ALPHA_TEST_CHANNEL < colorScaleAndCutoff.w) discard;
    #endif
    if(useLight>0.0)
    o.rgb *= cc_ambientSky.w;

   // CC_APPLY_FOG(o);
    return CCFragOutput(o);
  }
}%



CCProgram shadow-caster-vs %{
  precision highp float;
  #include <legacy/input-standard>
  #include <legacy/decode-base>
  #include <legacy/local-batch>
  #include <shared-ubos>
  #include <builtin/uniforms/cc-shadow>
#if CC_SUPPORT_CASCADED_SHADOW_MAP
  #include <builtin/uniforms/cc-csm>
#endif

  #if HAS_SECOND_UV || CC_USE_LIGHTMAP
    in vec2 a_texCoord1;
  #endif

  out vec2 v_uv;
  out vec2 v_uv1;
  out vec4 v_worldPos;

  out float v_clip_depth;

  vec4 vert () {
    StandardVertInput In;
    CCVertInput(In);

    mat4 matWorld, matWorldIT;
    CCGetWorldMatrixFull(matWorld, matWorldIT);

    v_worldPos = matWorld * In.position;
    vec4 clipPos = cc_matLightViewProj * v_worldPos;

    v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;
    #if HAS_SECOND_UV
      v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;
    #endif

    v_clip_depth = clipPos.z / clipPos.w * 0.5 + 0.5;

    return clipPos;
  }
}%

CCProgram shadow-caster-fs %{
  precision highp float;
  #include <shared-ubos>
  #include <common/data/packing>
  #include <legacy/shadow-map-base>

  in vec2 v_uv;
  in vec2 v_uv1;
  in vec4 v_worldPos;
  in float v_clip_depth;

  #if USE_ALBEDO_MAP
    uniform sampler2D albedoMap;
    #pragma define-meta ALBEDO_UV options([v_uv, v_uv1])
  #endif

  #if USE_ALPHA_TEST
    #pragma define-meta ALPHA_TEST_CHANNEL options([a, r])
  #endif

  vec4 frag () {
    vec4 baseColor = albedo;

    #if USE_ALBEDO_MAP
      baseColor *= texture(albedoMap, ALBEDO_UV);
    #endif

    #if USE_ALPHA_TEST
      if (baseColor.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;
    #endif

    // spot use linear
    if(cc_shadowLPNNInfo.x > 0.000001 && cc_shadowLPNNInfo.x < 1.999999) {
      // enabled linear depth
      if (cc_shadowNFLSInfo.z > 0.000001) {
        return vec4(CCGetLinearDepth(v_worldPos.xyz), 1.0, 1.0, 1.0);
      }
    }

    if (cc_shadowLPNNInfo.y > 0.000001) {
      return packDepthToRGBA(v_clip_depth);
    }

    return vec4(v_clip_depth, 1.0, 1.0, 1.0);
  }
}%

CCProgram ouline-g-vs %{
  precision highp float;
  #include <legacy/input-standard>
  #include <builtin/uniforms/cc-global>
  #include <legacy/decode-base>
  #include <legacy/local-batch>

  out vec2 v_uv;

  uniform OutlineVert {
  vec4 outlineParams; // x: line width, y: depth hack
  };

  vec4 vert () {
    StandardVertInput In;
    CCVertInput(In);

    mat4 matWorld;
    CCGetWorldMatrix(matWorld);

    float width = outlineParams.x * 0.001;

    #if USE_POSITION_SCALING
      vec3 dir = normalize(In.position.xyz);
      float flip = dot(dir, normalize(In.normal)) < 0.0 ? -1.0 : 1.0;
      In.position.xyz += flip * dir * width * 2.0;
      vec4 pos = cc_matProj * (cc_matView * matWorld) * In.position;
    #else
      In.position.xyz += normalize(In.normal) * width;
      vec4 pos = cc_matProj * (cc_matView * matWorld) * In.position;
    #endif

    pos.z -= outlineParams.y * 0.002;

    v_uv = a_texCoord;

    return pos;
  }
}%

CCProgram ouline-g-fs %{
  precision highp float;
  #include <builtin/uniforms/cc-global>
  #include <legacy/output>

  in vec2 v_uv;

  uniform OutlineFrag {
    vec4 baseColor;
  };

  #if USE_BASE_COLOR_MAP
  uniform sampler2D baseColorMap;
  #endif

  vec4 frag () {
  vec4 color = baseColor * cc_mainLitColor;
  #if USE_BASE_COLOR_MAP
    vec4 texColor = texture(baseColorMap, v_uv);
    texColor.rgb = SRGBToLinear(texColor.rgb);
    color *= texColor;
  #endif

  return CCFragOutput(vec4(color.rgb, 1.0));
  }
}%


CCProgram glow-g-vs %{
  precision highp float;
  #include <legacy/input>
  #include <builtin/uniforms/cc-global>
  #include <legacy/decode-base>
  #include <legacy/local-batch>
  #include <legacy/input>
  #include <legacy/fog-vs>

  uniform OutlineVert {
    vec4 glowScalParams; // x: line width, y: depth hack
  };
  out vec3 v_uv;


  vec4 vert () {
    vec4 position;
    CCVertInput(position);

    mat4 matWorld;
    CCGetWorldMatrix(matWorld);

    v_uv = position.xyz;
    position.xyz *= glowScalParams.x;
    CC_TRANSFER_FOG(matWorld * position);
    return cc_matProj * (cc_matView * matWorld) * position;
  }
}%

CCProgram glow-g-fs %{
  precision highp float;
  #include <legacy/output-standard>
  #include <legacy/fog-fs>

  uniform GlowFrag {
    vec4 baseColor;
  };

  in vec3 v_uv;

  vec4 frag () {
    vec4 o = baseColor;

    float dis = v_uv.x * v_uv.x + v_uv.y  * v_uv.y + v_uv.z  * v_uv.z;
    o.a = smoothstep(0.5, 0.1, dis);
    CC_APPLY_FOG(o);
    return CCFragOutput(o);

  }
}%